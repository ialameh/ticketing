"use strict";

require("@babel/polyfill");

var _airport = _interopRequireDefault(require("./airport.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var AIRPORT_URL = 'https://raw.githubusercontent.com/konsalex/Airport-Autocomplete-JS/master/src/data/airports.json';
var airports;
var fetchTries = false;
var pending = true; ///////////////////////////////
// Airport Autocomplete //////
//////////////////////////////
// Fuse Options, can be overriden from dev

var fuse_options = {
  shouldSort: true,
  threshold: 0.4,
  maxPatternLength: 32,
  keys: [{
    name: 'IATA',
    weight: 0.25
  }, {
    name: 'name',
    weight: 0.25
  }, {
    name: 'city',
    weight: 0.5
  }]
};
var Formatting = "<div class=\"$(unique-result)\"\n                     single-result\" \n                     data-index=\"$(i)\"> \n                     $(name) $(IATA) \n                    </br>\n                    $(city) ,$(country)\n                    </div>";
var default_options = {
  fuse_options: fuse_options,
  // the formatting of the suggestions
  formatting: Formatting,
  // the maximum number of suggestions
  max_returned_results: 5
};
/**
 * AirportInput(id, options = default_options)
 * Takes as inputs the following ->
 * id : The id of the input element is the webpage
 * options : A js object defining the Fuse options but also the
 *           formatting of the suggestions; more are going to be added
 *
 */

function AirportInput(_x) {
  return _AirportInput.apply(this, arguments);
}

function _AirportInput() {
  _AirportInput = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id) {
    var options,
        mergedOptions,
        airports_data,
        _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : default_options;
            mergedOptions = _objectSpread(_objectSpread({}, default_options), options); // Create a promise to handle airport data fetching from the RawGit

            airports_data = new Promise(function (resolve) {
              var FetchingFunction = function FetchingFunction() {
                if (fetchTries) {
                  // console.log('I am waiting for another id to fetch the airports');
                  if (!pending) {
                    clearInterval(cron);
                    resolve(airports);
                  }
                } else {
                  fetchTries = true; // Call the fetch function passing the url of the API as a parameter

                  fetch(AIRPORT_URL).then(function (response) {
                    return response.json();
                  }).then(function (data) {
                    pending = false;
                    airports = data;
                    clearInterval(cron);
                    resolve(data);
                  });
                }
              };

              var cron = setInterval(FetchingFunction, 500);
            });

            if (!(typeof airports === 'undefined' && pending)) {
              _context.next = 7;
              break;
            }

            _context.next = 6;
            return airports_data;

          case 6:
            airports = _context.sent;

          case 7:
            (0, _airport.default)(id, airports, mergedOptions);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _AirportInput.apply(this, arguments);
}

window.AirportInput = AirportInput;